# This workflow is designed to build and publish a Docker image for a Flask application.
# The image will be pushed to an AWS Elastic Container Registry (ECR).

name: Build & Publish Docker Flask App Image # Defines the name of the GitHub Actions workflow.

on:
  workflow_dispatch: # Allows this workflow to be manually triggered from the Actions tab.

jobs:
  docker-build-publish: # A single job named 'docker-build-publish'.
    runs-on: ubuntu-latest # Specifies that the job will run on the latest Ubuntu GitHub Actions runner.

    steps: # Defines the sequence of steps in this job.
      - name: Checkout Code # Step 1: Check out the repository code.
        uses: actions/checkout@v3 # Uses the official GitHub Action to fetch the repository code.

      - name: Set Environment Variables # Step 2: Set AWS environment variables for authentication.
        run: |
          # Add AWS credentials to the environment for subsequent commands.
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx # Step 3: Configure Docker Buildx for building multi-platform images.
        uses: docker/setup-buildx-action@v2 # Uses a Docker GitHub Action to set up Buildx.
        with:
          install: true # Ensures Buildx is installed.

      - name: Build/Publish Docker Image # Step 4: Build and push the Docker image to AWS ECR.
        run: |
          # Navigate to the directory containing the Dockerfile.
          cd ./03-docker 

          # Retrieve the AWS Account ID using the AWS CLI.
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

          # Authenticate Docker to AWS ECR using the retrieved credentials.
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com

          # Build and push the Docker image.
          # The image tag includes the AWS Account ID and the specified repository and tag.
          docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com/flask-app:flask-app-rc1 . --push
